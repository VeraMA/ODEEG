# generated by appcreator
import django_filters
from django import forms
from . models import (
    Certainty,
    CollectionSpec,
    Culture,
    Fabric,
    Hardware,
    Illustration,
    IllustrationTable,
    ImagingTechnique,
    Institution,
    Material,
    Object,
    PaintingStyle,
    PaintingSubTechnique,
    Period,
    Person,
    Place,
    Shape,
    ShapeComponent,
    ThreedData
)


class CertaintyListFilter(django_filters.FilterSet):
    cert_label = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Certainty._meta.get_field('cert_label').help_text,
        label=Certainty._meta.get_field('cert_label').verbose_name
    )
    cert_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Certainty._meta.get_field('cert_id').help_text,
        label=Certainty._meta.get_field('cert_id').verbose_name
    )

    class Meta:
        model = Certainty
        fields = [
            'cert_label',
            'cert_id',
            ]


class CollectionSpecListFilter(django_filters.FilterSet):
    collection_spec = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=CollectionSpec._meta.get_field('collection_spec').help_text,
        label=CollectionSpec._meta.get_field('collection_spec').verbose_name
    )

    class Meta:
        model = CollectionSpec
        fields = [
            'collection_spec',
            'partof_institution',
            ]


class CultureListFilter(django_filters.FilterSet):
    culture = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Culture._meta.get_field('culture').help_text,
        label=Culture._meta.get_field('culture').verbose_name
    )
    culture_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Culture._meta.get_field('culture_id').help_text,
        label=Culture._meta.get_field('culture_id').verbose_name
    )

    class Meta:
        model = Culture
        fields = [
            'culture',
            'culture_id',
            ]


class FabricListFilter(django_filters.FilterSet):
    material_fabric = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fabric._meta.get_field('material_fabric').help_text,
        label=Fabric._meta.get_field('material_fabric').verbose_name
    )
    material_fabric_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Fabric._meta.get_field('material_fabric_id').help_text,
        label=Fabric._meta.get_field('material_fabric_id').verbose_name
    )

    class Meta:
        model = Fabric
        fields = [
            'material_fabric',
            'material_fabric_id',
            ]


class HardwareListFilter(django_filters.FilterSet):
    threed_hardware = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Hardware._meta.get_field('threed_hardware').help_text,
        label=Hardware._meta.get_field('threed_hardware').verbose_name
    )

    class Meta:
        model = Hardware
        fields = [
            'threed_hardware',
            ]


class IllustrationListFilter(django_filters.FilterSet):
    ill_software = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Illustration._meta.get_field('ill_software').help_text,
        label=Illustration._meta.get_field('ill_software').verbose_name
    )
    ill_software_steps = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Illustration._meta.get_field('ill_software_steps').help_text,
        label=Illustration._meta.get_field('ill_software_steps').verbose_name
    )
    ill_notes = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Illustration._meta.get_field('ill_notes').help_text,
        label=Illustration._meta.get_field('ill_notes').verbose_name
    )

    class Meta:
        model = Illustration
        fields = [
            'folder_name',
            'ill_date',
            'ill_author',
            'ill_software',
            'ill_software_steps',
            'ill_notes',
            ]


class IllustrationTableListFilter(django_filters.FilterSet):
    illtab_software = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=IllustrationTable._meta.get_field('illtab_software').help_text,
        label=IllustrationTable._meta.get_field('illtab_software').verbose_name
    )
    illtab_software_steps = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=IllustrationTable._meta.get_field('illtab_software_steps').help_text,
        label=IllustrationTable._meta.get_field('illtab_software_steps').verbose_name
    )
    illtab_notes = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=IllustrationTable._meta.get_field('illtab_notes').help_text,
        label=IllustrationTable._meta.get_field('illtab_notes').verbose_name
    )

    class Meta:
        model = IllustrationTable
        fields = [
            'folder_name',
            'illtab_date',
            'illtab_author',
            'illtab_software',
            'illtab_software_steps',
            'illtab_notes',
            ]


class ImagingTechniqueListFilter(django_filters.FilterSet):
    threed_technique = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ImagingTechnique._meta.get_field('threed_technique').help_text,
        label=ImagingTechnique._meta.get_field('threed_technique').verbose_name
    )
    threed_technique_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ImagingTechnique._meta.get_field('threed_technique_id').help_text,
        label=ImagingTechnique._meta.get_field('threed_technique_id').verbose_name
    )

    class Meta:
        model = ImagingTechnique
        fields = [
            'threed_technique',
            'threed_technique_id',
            ]


class InstitutionListFilter(django_filters.FilterSet):
    inst_name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Institution._meta.get_field('inst_name').help_text,
        label=Institution._meta.get_field('inst_name').verbose_name
    )
    inst_geo_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Institution._meta.get_field('inst_geo_id').help_text,
        label=Institution._meta.get_field('inst_geo_id').verbose_name
    )
    inst_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Institution._meta.get_field('inst_id').help_text,
        label=Institution._meta.get_field('inst_id').verbose_name
    )

    class Meta:
        model = Institution
        fields = [
            'inst_name',
            'inst_geo_id',
            'inst_id',
            ]


class MaterialListFilter(django_filters.FilterSet):
    material = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Material._meta.get_field('material').help_text,
        label=Material._meta.get_field('material').verbose_name
    )
    material_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Material._meta.get_field('material_id').help_text,
        label=Material._meta.get_field('material_id').verbose_name
    )

    class Meta:
        model = Material
        fields = [
            'material',
            'material_id',
            ]


class ObjectListFilter(django_filters.FilterSet):
    folder_name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Object._meta.get_field('folder_name').help_text,
        label=Object._meta.get_field('folder_name').verbose_name
    )
    inv_nr = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Object._meta.get_field('inv_nr').help_text,
        label=Object._meta.get_field('inv_nr').verbose_name
    )
    bapd_nr = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Object._meta.get_field('bapd_nr').help_text,
        label=Object._meta.get_field('bapd_nr').verbose_name
    )
    provenance_attribution = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Object._meta.get_field('provenance_attribution').help_text,
        label=Object._meta.get_field('provenance_attribution').verbose_name
    )
    bibref = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Object._meta.get_field('bibref').help_text,
        label=Object._meta.get_field('bibref').verbose_name
    )
    collref = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Object._meta.get_field('collref').help_text,
        label=Object._meta.get_field('collref').verbose_name
    )
    materialdensity_measure = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Object._meta.get_field('materialdensity_measure').help_text,
        label=Object._meta.get_field('materialdensity_measure').verbose_name
    )
    object_notes = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Object._meta.get_field('object_notes').help_text,
        label=Object._meta.get_field('object_notes').verbose_name
    )

    class Meta:
        model = Object
        fields = [
            'folder_name',
            'collection_inst',
            'collection_spec',
            'inv_nr',
            'bapd_nr',
            'shape',
            'shape_comp',
            'object_associated_to_inv',
            'period',

            'culture',
            'material',
            'material_fabric',
            'painting_style',
            'painting_style_sub',
            'provenance_spot',
            'provenance_spot_cert',
            'provenance_production',
            'provenance_production_cert',
            'provenance_attribution',
            'provenance_acquisition',
            'provenance_acquisition_date',
            'bibref',
            'collref',
            'weight',
            'width',
            'height',
            'length',
            'fillingheight',
            'fillingvolume',
            'materialvolume',
            'materialdensity',
            'materialdensity_measure',
            'boundingbox',
            'object_notes',
            ]


class PaintingStyleListFilter(django_filters.FilterSet):
    painting_style = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=PaintingStyle._meta.get_field('painting_style').help_text,
        label=PaintingStyle._meta.get_field('painting_style').verbose_name
    )
    painting_style_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=PaintingStyle._meta.get_field('painting_style_id').help_text,
        label=PaintingStyle._meta.get_field('painting_style_id').verbose_name
    )

    class Meta:
        model = PaintingStyle
        fields = [
            'painting_style',
            'painting_style_id',
            ]


class PaintingSubTechniqueListFilter(django_filters.FilterSet):
    painting_style_sub = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=PaintingSubTechnique._meta.get_field('painting_style_sub').help_text,
        label=PaintingSubTechnique._meta.get_field('painting_style_sub').verbose_name
    )
    painting_style_sub_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=PaintingSubTechnique._meta.get_field('painting_style_sub_id').help_text,
        label=PaintingSubTechnique._meta.get_field('painting_style_sub_id').verbose_name
    )

    class Meta:
        model = PaintingSubTechnique
        fields = [
            'painting_style_sub',
            'painting_style_sub_id',
            ]


class PeriodListFilter(django_filters.FilterSet):
    period = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Period._meta.get_field('period').help_text,
        label=Period._meta.get_field('period').verbose_name
    )
    period_abbrev = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Period._meta.get_field('period_abbrev').help_text,
        label=Period._meta.get_field('period_abbrev').verbose_name
    )
    period_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Period._meta.get_field('period_id').help_text,
        label=Period._meta.get_field('period_id').verbose_name
    )

    class Meta:
        model = Period
        fields = [
            'period',
            'period_abbrev',
            'period_id',

            ]


class PersonListFilter(django_filters.FilterSet):
    person_last_name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Person._meta.get_field('person_last_name').help_text,
        label=Person._meta.get_field('person_last_name').verbose_name
    )
    person_first_name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Person._meta.get_field('person_first_name').help_text,
        label=Person._meta.get_field('person_first_name').verbose_name
    )
    person_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Person._meta.get_field('person_id').help_text,
        label=Person._meta.get_field('person_id').verbose_name
    )

    class Meta:
        model = Person
        fields = [
            'person_last_name',
            'person_first_name',
            'person_member_inst',
            'person_id',
            ]


class PlaceListFilter(django_filters.FilterSet):
    place_name = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Place._meta.get_field('place_name').help_text,
        label=Place._meta.get_field('place_name').verbose_name
    )
    geonames_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Place._meta.get_field('geonames_id').help_text,
        label=Place._meta.get_field('geonames_id').verbose_name
    )

    class Meta:
        model = Place
        fields = [
            'place_name',
            'geonames_id',
            'coord_exact',
            'place_type',
            ]


class ShapeListFilter(django_filters.FilterSet):
    shape = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Shape._meta.get_field('shape').help_text,
        label=Shape._meta.get_field('shape').verbose_name
    )
    shape_alt = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Shape._meta.get_field('shape_alt').help_text,
        label=Shape._meta.get_field('shape_alt').verbose_name
    )
    shape_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=Shape._meta.get_field('shape_id').help_text,
        label=Shape._meta.get_field('shape_id').verbose_name
    )

    class Meta:
        model = Shape
        fields = [
            'shape',
            'shape_alt',
            'shape_id',
            ]


class ShapeComponentListFilter(django_filters.FilterSet):
    shape_comp = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ShapeComponent._meta.get_field('shape_comp').help_text,
        label=ShapeComponent._meta.get_field('shape_comp').verbose_name
    )
    shape_comp_id = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ShapeComponent._meta.get_field('shape_comp_id').help_text,
        label=ShapeComponent._meta.get_field('shape_comp_id').verbose_name
    )

    class Meta:
        model = ShapeComponent
        fields = [
            'shape_comp',
            'shape_comp_id',
            ]


class ThreedDataListFilter(django_filters.FilterSet):
    threed_location_char = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_location_char').help_text,
        label=ThreedData._meta.get_field('threed_location_char').verbose_name
    )
    threed_fov = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_fov').help_text,
        label=ThreedData._meta.get_field('threed_fov').verbose_name
    )
    threed_resolution = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_resolution').help_text,
        label=ThreedData._meta.get_field('threed_resolution').verbose_name
    )
    threed_acc = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_acc').help_text,
        label=ThreedData._meta.get_field('threed_acc').verbose_name
    )
    threed_texture_acquisition = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_texture_acquisition').help_text,
        label=ThreedData._meta.get_field('threed_texture_acquisition').verbose_name
    )
    threed_texture_color = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_texture_color').help_text,
        label=ThreedData._meta.get_field('threed_texture_color').verbose_name
    )
    threed_texture_resolution = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_texture_resolution').help_text,
        label=ThreedData._meta.get_field('threed_texture_resolution').verbose_name
    )
    threed_software = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_software').help_text,
        label=ThreedData._meta.get_field('threed_software').verbose_name
    )
    threed_merging_software = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_merging_software').help_text,
        label=ThreedData._meta.get_field('threed_merging_software').verbose_name
    )
    threed_postproc_software = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_postproc_software').help_text,
        label=ThreedData._meta.get_field('threed_postproc_software').verbose_name
    )
    threed_postproc_actions = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_postproc_actions').help_text,
        label=ThreedData._meta.get_field('threed_postproc_actions').verbose_name
    )
    threed_postproc_file = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_postproc_file').help_text,
        label=ThreedData._meta.get_field('threed_postproc_file').verbose_name
    )
    threed_postproc_low_software = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_postproc_low_software').help_text,
        label=ThreedData._meta.get_field('threed_postproc_low_software').verbose_name
    )
    threed_postproc_low_software_actions = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_postproc_low_software_actions').help_text,
        label=ThreedData._meta.get_field('threed_postproc_low_software_actions').verbose_name
    )
    threed_postproc_low_file = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_postproc_low_file').help_text,
        label=ThreedData._meta.get_field('threed_postproc_low_file').verbose_name
    )
    threed_notes = django_filters.CharFilter(
        lookup_expr='icontains',
        help_text=ThreedData._meta.get_field('threed_notes').help_text,
        label=ThreedData._meta.get_field('threed_notes').verbose_name
    )

    class Meta:
        model = ThreedData
        fields = [
            'folder_name',
            'threed_location',
            'threed_location_char',
            'threed_date',
            'threed_author',
            'threed_technique',
            'threed_hardware',
            'threed_fov',
            'threed_resolution',
            'threed_acc',
            'threed_texture_acquisition',
            'threed_texture_color',
            'threed_texture_resolution',
            'threed_software',
            'threed_scan_nrs',
            'threed_merging_date',
            'threed_merging_author',
            'threed_merging_software',
            'threed_postproc_date',
            'threed_postproc_author',
            'threed_postproc_software',
            'threed_postproc_actions',
            'threed_postproc_file',
            'threed_postproc_low_date',
            'threed_postproc_low_author',
            'threed_postproc_low_software',
            'threed_postproc_low_software_actions',
            'threed_postproc_low_file',
            'threed_notes',
            ]
