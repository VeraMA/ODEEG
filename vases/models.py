# generated by appcreator

from django.db import models
from django.urls import reverse
from django.contrib.postgres.fields import DateRangeField

from vocabs.models import SkosConcept

from browsing.browsing_utils import model_to_dict


class Certainty(models.Model):
    ### A vocabulary with values about certainty used when associating a place with an object ###
    cert_label = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Certainty",
        help_text="",
    )
    cert_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Certainty, Getty AAT ID",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class CollectionSpec(models.Model):
    ### Information about specific collections ###
    collection_spec = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Collection, Specific",
        help_text="Name of the specific collection the object is part of",
    )
    partof_institution = models.ForeignKey(
        "Institution",
        related_name='rvn_collectionspec_partof_institution_institution',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Part of Institution",
        help_text="The institution the specific collection is part of",
    )

    def __str__(self):
        return "{}".format(self.id)


class Culture(models.Model):
    ### A vocabulary with cultures ###
    culture = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Culture",
        help_text="",
    )
    culture_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Culture, Getty AAT ID",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class Fabric(models.Model):
    ### A vocabulary with fabrics ###
    material_fabric = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Material: Fabric",
        help_text="",
    )
    material_fabric_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Material: Fabric, Getty AAT ID",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class Hardware(models.Model):
    ### A vocabulary with hardware for 3D imaging ###
    threed_hardware = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="3D Survey: hardware ['hardware' AAT ID: 300312368]",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class Illustration(models.Model):
    ### Information about illustrations for an object ###
    folder_name = models.ForeignKey(
        "Object",
        related_name='rvn_illustration_folder_name_object',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Folder name",
        help_text="Folder name of object",
    )
    ill_date = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date",
        help_text="Illustration date",
    )
    ill_author = models.ManyToManyField(
        "Person",
        related_name='rvn_illustration_ill_author_person',
        blank=True,
        verbose_name="Creator(s)",
        help_text="Illustration author",
    )
    ill_software = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Software",
        help_text="Illustration software",
    )
    ill_software_steps = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Software actions",
        help_text="Illustration software actions",
    )
    ill_notes = models.TextField(
        blank=True,
        verbose_name="Notes",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class IllustrationTable(models.Model):
    ### Information about illustrations in an illustrative table ###
    folder_name = models.ForeignKey(
        "Object",
        related_name='rvn_illustrationtable_folder_name_object',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Folder name",
        help_text="Folder name of object",
    )
    illtab_date = models.DateField(
        blank=True, null=True,
        verbose_name="Creation date",
        help_text="Illustration date",
    )
    illtab_author = models.ManyToManyField(
        "Person",
        related_name='rvn_illustrationtable_illtab_author_person',
        blank=True,
        verbose_name="Creator(s)",
        help_text="Illustration author",
    )
    illtab_software = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Software",
        help_text="Illustration software",
    )
    illtab_software_steps = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Software actions",
        help_text="Illustration software actions",
    )
    illtab_notes = models.TextField(
        blank=True,
        verbose_name="Notes",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class ImagingTechnique(models.Model):
    ### A vocabulary with imaging techniques ###
    threed_technique = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="3D Survey: imaging technique",
        help_text="",
    )
    threed_technique_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="3D Survey: imaging technique [AAT ID]",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class Institution(models.Model):
    ### Information about institutions ###
    inst_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Institution name",
        help_text="",
    )
    inst_geo_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Geonames ID of institution",
        help_text="Collection [institution] [GeoNameID]",
    )
    inst_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Identifier of Institution",
        help_text="Preferably from GND, or then VIAF or ORCID",
    )

    def __str__(self):
        return "{}".format(self.id)


class Material(models.Model):
    ### A vocabulary with materials ###
    material = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Material",
        help_text="",
    )
    material_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Material, Getty AAT ID",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class Object(models.Model):
    ### General information about the object ###
    folder_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Folder name",
        help_text="Name of the folder containing all files related to the object",
    )
    collection_inst = models.ForeignKey(
        "Institution",
        related_name='rvn_object_collection_inst_institution',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Collection, Institution",
        help_text="Name of the collection where the object is kept at; as defined by Getty AAT ID: 300025976",
    )
    collection_spec = models.ForeignKey(
        "CollectionSpec",
        related_name='rvn_object_collection_spec_collectionspec',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Collection, Specific",
        help_text="Name of the specific collection the object is part of; as defined by Getty AAT ID: 300025976",
    )
    inv_nr = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="ID Inv. Nr.",
        help_text="Inventory number of object",
    )
    bapd_nr = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="BAPD Nr.",
        help_text="Corresponding number of Beazley Archive Pottery Database",
    )
    shape = models.ManyToManyField(
        "Shape",
        related_name='rvn_object_shape_shape',
        blank=True,
        verbose_name="Shape",
        help_text="",
    )
    shape_comp = models.ManyToManyField(
        "ShapeComponent",
        related_name='rvn_object_shape_comp_shapecomponent',
        blank=True,
        verbose_name="Shape components",
        help_text="",
    )
    object_associated_to_inv = models.ManyToManyField(
        "Object",
        related_name='rvn_object_object_associated_to_inv_object',
        blank=True,
        verbose_name="Object is associated to, ID Inv. Nr.",
        help_text="",
    )
    period = models.ManyToManyField(
        "Period",
        related_name='rvn_object_period_period',
        blank=True,
        verbose_name="Period",
        help_text="",
    )
    object_dating = DateRangeField(
        blank=True, null=True,
        verbose_name="Object dating",
        help_text="",
    )
    culture = models.ManyToManyField(
        "Culture",
        related_name='rvn_object_culture_culture',
        blank=True,
        verbose_name="Culture",
        help_text="",
    )
    material = models.ManyToManyField(
        "Material",
        related_name='rvn_object_material_material',
        blank=True,
        verbose_name="Material",
        help_text="",
    )
    material_fabric = models.ManyToManyField(
        "Fabric",
        related_name='rvn_object_material_fabric_fabric',
        blank=True,
        verbose_name="Material: Fabric",
        help_text="",
    )
    painting_style = models.ManyToManyField(
        "PaintingStyle",
        related_name='rvn_object_painting_style_paintingstyle',
        blank=True,
        verbose_name="Painting style/technique",
        help_text="",
    )
    painting_style_sub = models.ManyToManyField(
        "PaintingSubTechnique",
        related_name='rvn_object_painting_style_sub_paintingsubtechnique',
        blank=True,
        verbose_name="Painting sub technique",
        help_text="",
    )
    provenance_spot = models.ForeignKey(
        "Place",
        related_name='rvn_object_provenance_spot_place',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Finding spot",
        help_text="Provenance: Finding spot",
    )
    provenance_spot_cert = models.ForeignKey(
        "Certainty",
        related_name='rvn_object_provenance_spot_cert_certainty',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Finding spot, certainty",
        help_text="Provenance: Finding spot, certainty",
    )
    provenance_production = models.ForeignKey(
        "Place",
        related_name='rvn_object_provenance_production_place',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Production center",
        help_text="Provenance: Production center",
    )
    provenance_production_cert = models.ForeignKey(
        "Certainty",
        related_name='rvn_object_provenance_production_cert_certainty',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Production center, certainty",
        help_text="Provenance: Production center, certainty",
    )
    provenance_attribution = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Attributed to artist/maker",
        help_text="Provenance: attributed to artist/maker",
    )
    provenance_acquisition = models.ManyToManyField(
        "Place",
        related_name='rvn_object_provenance_acquisition_place',
        blank=True,
        verbose_name="Place of latest acquisition",
        help_text="Provenance: place of latest acquisition (modern times)",
    )
    provenance_acquisition_date = models.DateField(
        blank=True, null=True,
        verbose_name="Date of latest acquisition",
        help_text="Provenance: date of latest acquisition (modern times), based on Getty AAT 'period' (300081446)",
    )
    bibref = models.TextField(
        blank=True,
        verbose_name="Bibliographic reference",
        help_text="",
    )
    collref = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Collection reference",
        help_text="",
    )
    weight = models.DecimalField(
        max_digits=19,
        decimal_places=10,
        blank=True, null=True,
        verbose_name="Weight (g)",
        help_text="",
    )
    width = models.DecimalField(
        max_digits=19,
        decimal_places=10,
        blank=True, null=True,
        verbose_name="Width (mm)",
        help_text="",
    )
    height = models.DecimalField(
        max_digits=19,
        decimal_places=10,
        blank=True, null=True,
        verbose_name="Height (mm)",
        help_text="",
    )
    length = models.DecimalField(
        max_digits=19,
        decimal_places=10,
        blank=True, null=True,
        verbose_name="Length (mm)",
        help_text="",
    )
    fillingheight = models.DecimalField(
        max_digits=19,
        decimal_places=10,
        blank=True, null=True,
        verbose_name="Max. Filling Height (mm)",
        help_text="",
    )
    fillingvolume = models.DecimalField(
        max_digits=19,
        decimal_places=10,
        blank=True, null=True,
        verbose_name="Max. Filling Volume (cm3)",
        help_text="",
    )
    materialvolume = models.DecimalField(
        max_digits=19,
        decimal_places=10,
        blank=True, null=True,
        verbose_name="Material Volume (cm3)",
        help_text="",
    )
    materialdensity = models.DecimalField(
        max_digits=19,
        decimal_places=10,
        blank=True, null=True,
        verbose_name="Material Density (g/cm3)",
        help_text="",
    )
    materialdensity_measure = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Material Density measure",
        help_text="Material Density: measured or estimated",
    )
    boundingbox = models.DecimalField(
        max_digits=19,
        decimal_places=10,
        blank=True, null=True,
        verbose_name="Bounding Box (cm3)",
        help_text="",
    )
    object_notes = models.TextField(
        blank=True,
        verbose_name="Notes",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class PaintingStyle(models.Model):
    ### A vocabulary with painting styles and techniques ###
    painting_style = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Painting style/technique",
        help_text="",
    )
    painting_style_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Painting style/technique, Getty AAT ID",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class PaintingSubTechnique(models.Model):
    ### A vocabulary with sub techniques ###
    painting_style_sub = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Painting sub technique",
        help_text="",
    )
    painting_style_sub_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Painting sub technique, Getty AAT ID",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class Period(models.Model):
    ### A vocabulary with periods ###
    period = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Period",
        help_text="",
    )
    period_abbrev = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Period, Abbreviation",
        help_text="",
    )
    period_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Period, ID",
        help_text="",
    )
    period_date_range = DateRangeField(
        blank=True, null=True,
        verbose_name="Period, date range",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class Person(models.Model):
    ### Information about persons ###
    person_last_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Last Name",
        help_text="Last name of a person",
    )
    person_first_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="First Name",
        help_text="First name of a person",
    )
    person_member_inst = models.ForeignKey(
        "Institution",
        related_name='rvn_person_person_member_inst_institution',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Member institution of person",
        help_text="",
    )
    person_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Identifier of Person",
        help_text="Preferably from GND, or then VIAF or ORCID",
    )

    def __str__(self):
        return "{}".format(self.id)


class Place(models.Model):
    ### Information about places ###
    place_name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name of place",
        help_text="",
    )
    geonames_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Identifier of place",
        help_text="",
    )
    coord_exact = models.BooleanField(
        blank=True, null=True,
        verbose_name="Coordinates are exact?",
        help_text="Yes, if coordinates are exact.",
    )
    place_type = models.ManyToManyField(
        SkosConcept,
        related_name='rvn_place_place_type_skosconcept',
        blank=True,
        verbose_name="Type of place",
        help_text="Type of place in relation to the object. E. g. is it a find place or a production place?",
    )

    def __str__(self):
        return "{}".format(self.id)


class Shape(models.Model):
    ### A vocabulary with shape names ###
    shape = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Shape",
        help_text="",
    )
    shape_alt = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Shape, alternate names",
        help_text="",
    )
    shape_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Shape, Getty AAT ID",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class ShapeComponent(models.Model):
    ### A vocabulary with names of shape components ###
    shape_comp = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Shape components",
        help_text="",
    )
    shape_comp_id = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Shape components, Getty AAT ID",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)


class ThreedData(models.Model):
    ### Information about 3d models for an object ###
    folder_name = models.ForeignKey(
        "Object",
        related_name='rvn_threeddata_folder_name_object',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Folder name",
        help_text="",
    )
    threed_location = models.ManyToManyField(
        "Institution",
        related_name='rvn_threeddata_threed_location_institution',
        blank=True,
        verbose_name="3D Survey: location",
        help_text="",
    )
    threed_location_char = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="3D Survey: location characteristics",
        help_text="",
    )
    threed_date = models.DateField(
        blank=True, null=True,
        verbose_name="3D Survey: date",
        help_text="",
    )
    threed_author = models.ManyToManyField(
        "Person",
        related_name='rvn_threeddata_threed_author_person',
        blank=True,
        verbose_name="3D Survey: author",
        help_text="",
    )
    threed_technique = models.ForeignKey(
        "ImagingTechnique",
        related_name='rvn_threeddata_threed_technique_imagingtechnique',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="3D Survey: imaging technique",
        help_text="",
    )
    threed_hardware = models.ForeignKey(
        "Hardware",
        related_name='rvn_threeddata_threed_hardware_hardware',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="3D Survey: hardware ['hardware' AAT ID: 300312368]",
        help_text="",
    )
    threed_fov = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="FOV",
        help_text="",
    )
    threed_resolution = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Resolution limit [AAT ID: 300222980]",
        help_text="",
    )
    threed_acc = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Feature Accuracy *",
        help_text="",
    )
    threed_texture_acquisition = models.CharField(
        choices=(('texture_acq_scanner', 'scanner'), ('texture_acq_3dscanner', '3D scanner'), ('texture_acq_camera', 'external camera')),
        max_length=250,
        blank=True,
        verbose_name="Image texture acquisition [3D scanner/external camera]",
        help_text="",
    )
    threed_texture_color = models.CharField(
        choices=(('texture_color_color', 'colour'), ('texture_color_bw', 'B&W')),
        max_length=250,
        blank=True,
        verbose_name="Image texture acquisition [colour/B&W]",
        help_text="",
    )
    threed_texture_resolution = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Image texture resolution",
        help_text="",
    )
    threed_software = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Software acquisition",
        help_text="",
    )
    threed_scan_nrs = models.IntegerField(
        blank=True, null=True,
        verbose_name="Nr. scans",
        help_text="",
    )
    threed_merging_date = models.DateField(
        blank=True, null=True,
        verbose_name="3D data alignment/merging: date",
        help_text="",
    )
    threed_merging_author = models.ManyToManyField(
        "Person",
        related_name='rvn_threeddata_threed_merging_author_person',
        blank=True,
        verbose_name="3D data alignment/merging: author",
        help_text="",
    )
    threed_merging_software = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="3D data alignment/merging: software",
        help_text="",
    )
    threed_postproc_date = models.DateField(
        blank=True, null=True,
        verbose_name="3D merged model post-processing: date",
        help_text="",
    )
    threed_postproc_author = models.ManyToManyField(
        "Person",
        related_name='rvn_threeddata_threed_postproc_author_person',
        blank=True,
        verbose_name="3D merged model post-processing: author",
        help_text="",
    )
    threed_postproc_software = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="3D merged model post-processing: software",
        help_text="",
    )
    threed_postproc_actions = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="3D merged model post-processing: actions",
        help_text="",
    )
    threed_postproc_file = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="3D merged post-processed model: file name",
        help_text="",
    )
    threed_postproc_low_date = models.DateField(
        blank=True, null=True,
        verbose_name="Low resolution 3D model post-processing: date",
        help_text="",
    )
    threed_postproc_low_author = models.ManyToManyField(
        "Person",
        related_name='rvn_threeddata_threed_postproc_low_author_person',
        blank=True,
        verbose_name="Low resolution 3D model post-processing: author",
        help_text="",
    )
    threed_postproc_low_software = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Low resolution 3D model post-processing: software",
        help_text="",
    )
    threed_postproc_low_software_actions = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Low resolution 3D model post-processing: actions",
        help_text="",
    )
    threed_postproc_low_file = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Low resolution 3D model: file name",
        help_text="",
    )
    threed_notes = models.TextField(
        blank=True,
        verbose_name="Notes [AAT ID: 300027200]",
        help_text="",
    )

    def __str__(self):
        return "{}".format(self.id)
